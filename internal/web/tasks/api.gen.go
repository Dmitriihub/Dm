// Package tasks provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package tasks

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// Task defines model for Task.
type Task struct {
	Id     int64  `json:"id"`
	IsDone bool   `json:"is_done"`
	Task   string `json:"task"`
}

// PostTasksJSONRequestBody defines body for PostTasks for application/json ContentType.
type PostTasksJSONRequestBody struct {
	Task   string `json:"task"`   // Название задачи
	IsDone bool   `json:"is_done"` // Статус выполнения задачи
}



// PatchTasksIdJSONRequestBody defines body for PatchTasksId for application/json ContentType.
type PatchTasksIdJSONRequestBody struct {
    Task  string `json:"task"`
    IsDone bool   `json:"is_done"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all tasks
	// (GET /tasks)
	GetTasks(ctx echo.Context) error
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx echo.Context) error
	// Delete a task by ID
	// (DELETE /tasks/{id})
	DeleteTasksId(ctx echo.Context, id int64) error
	// Update a task by ID
	// (PATCH /tasks/{id})
	PatchTasksId(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasks(ctx echo.Context) error {
	var err error

	// Логируем запрос
	fmt.Println("Request to get tasks")

	// Вызываем обработчик для получения всех задач
	err = w.Handler.GetTasks(ctx)
	return err
}

// PostTasks converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasks(ctx echo.Context) error {
	var body PostTasksJSONRequestBody

	// Проверяем, что тело запроса не пустое
	if ctx.Request().Body == nil || ctx.Request().ContentLength == 0 {
		return echo.NewHTTPError(http.StatusBadRequest, "Request body is empty")
	}

	// Читаем тело запроса как строку
	reqBody, err := io.ReadAll(ctx.Request().Body)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Failed to read request body")
	}
	fmt.Println("Raw request body:", string(reqBody))

	// Восстанавливаем тело запроса для дальнейшего использования
	ctx.Request().Body = io.NopCloser(bytes.NewReader(reqBody))

	// Декодируем JSON
	if err := json.Unmarshal(reqBody, &body); err != nil {
		fmt.Println("Error binding request body:", err)
		return echo.NewHTTPError(http.StatusBadRequest, "Invalid request body")
	}

	// Логируем тело запроса для диагностики
	fmt.Printf("Parsed request body: %+v\n", body)

	// Проверяем, что поля не пустые
	if body.Task == "" || body.IsDone != false && body.IsDone != true {
		return echo.NewHTTPError(http.StatusBadRequest, "Fields 'task' and 'is_done' are required")
	}

	// Передаем тело запроса в обработчик
	return w.Handler.PostTasks(ctx)
}

// DeleteTasksId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTasksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	// Извлекаем параметр id из URL
	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Логируем id для диагностики
	fmt.Println("Request to delete task with id:", id)

	// Вызываем обработчик для удаления задачи
	err = w.Handler.DeleteTasksId(ctx, id)
	return err
}


func (w *ServerInterfaceWrapper) PatchTasksId(ctx echo.Context) error {
    var id int64

    // Извлекаем параметр id из URL
    if err := runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id); err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
    }

    // Логируем заголовки запроса
    fmt.Printf("Headers: %+v\n", ctx.Request().Header)

    // Читаем тело запроса вручную
    bodyBytes, err := io.ReadAll(ctx.Request().Body)
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, "Failed to read body")
    }

    // Логируем сырое тело
    fmt.Printf("Raw body: %s\n", string(bodyBytes))

    // Пересоздаем тело запроса, чтобы его можно было прочитать снова
    ctx.Request().Body = io.NopCloser(bytes.NewReader(bodyBytes))

    // Проверяем, что тело не пустое
    if len(bodyBytes) == 0 {
        return echo.NewHTTPError(http.StatusBadRequest, "Empty request body")
    }

    // Декодируем JSON
    var body PatchTasksIdJSONRequestBody
    if err := json.Unmarshal(bodyBytes, &body); err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, "Invalid JSON format")
    }

    fmt.Printf("Parsed request body: %+v\n", body)

    // Проверяем, что поле `task` не пустое
    if body.Task == "" {
        return echo.NewHTTPError(http.StatusBadRequest, "Field 'task' is required")
    }

    // Передаем обработчику
    return w.Handler.PatchTasksId(ctx, id)
}


// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}


func CheckPostTasksRequestBody(next echo.HandlerFunc) echo.HandlerFunc {
    return func(c echo.Context) error {
        // Проверяем, что тело запроса не пустое
        if c.Request().Body == nil || c.Request().ContentLength == 0 {
            return echo.NewHTTPError(http.StatusBadRequest, "Request body is empty")
        }

        // Читаем тело запроса, чтобы убедиться, что оно в порядке
        reqBody, err := io.ReadAll(c.Request().Body)
        if err != nil {
            return echo.NewHTTPError(http.StatusBadRequest, "Failed to read request body")
        }

        // Восстанавливаем тело запроса для дальнейшего использования
        c.Request().Body = io.NopCloser(bytes.NewReader(reqBody))

        // Декодируем тело запроса в структуру
        var body PostTasksJSONRequestBody
        if err := json.Unmarshal(reqBody, &body); err != nil {
            return echo.NewHTTPError(http.StatusBadRequest, "Invalid request body")
        }

        // Если тело запроса корректное, передаем управление дальше
        return next(c)
    }
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/tasks", wrapper.GetTasks)
	router.POST(baseURL+"/tasks", wrapper.PostTasks)
	router.DELETE(baseURL+"/tasks/:id", wrapper.DeleteTasksId)
	router.PATCH(baseURL+"/tasks/:id", wrapper.PatchTasksId)
	router.POST(baseURL+"/tasks", CheckPostTasksRequestBody(wrapper.PostTasks))
}

type GetTasksRequestObject struct {
}

type GetTasksResponseObject interface {
	VisitGetTasksResponse(w http.ResponseWriter) error
}

type GetTasks200JSONResponse []Task

func (response GetTasks200JSONResponse) VisitGetTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// Структура для привязки данных из тела запроса при создании задачи
type CreateTaskRequestBody struct {
    Task   string `json:"task"`   // Название задачи
    IsDone bool   `json:"is_done"` // Статус выполнения задачи
}

type PostTasksRequestObject struct {
	Body PostTasksJSONRequestBody `json:"body"`
}

type PostTasksResponseObject interface {
	VisitPostTasksResponse(w http.ResponseWriter) error
}

type PostTasks201JSONResponse Task

func (response PostTasks201JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTasksIdRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteTasksIdResponseObject interface {
	VisitDeleteTasksIdResponse(w http.ResponseWriter) error
}

type DeleteTasksId204Response struct {
}

func (response DeleteTasksId204Response) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTasksId400JSONResponse Error

func (response DeleteTasksId400JSONResponse) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTasksId404JSONResponse Error

func (response DeleteTasksId404JSONResponse) VisitDeleteTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchTasksIdRequestObject struct {
	Id   int64 `json:"id"`
	Body *PatchTasksIdJSONRequestBody
}

type PatchTasksIdResponseObject interface {
	VisitPatchTasksIdResponse(w http.ResponseWriter) error
}

type PatchTasksId200JSONResponse Task

func (response PatchTasksId200JSONResponse) VisitPatchTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchTasksId400JSONResponse Error

func (response PatchTasksId400JSONResponse) VisitPatchTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchTasksId404JSONResponse Error

func (response PatchTasksId404JSONResponse) VisitPatchTasksIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all tasks
	// (GET /tasks)
	GetTasks(ctx context.Context, request GetTasksRequestObject) (GetTasksResponseObject, error)
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx context.Context, request PostTasksRequestObject) (PostTasksResponseObject, error)
	// Delete a task by ID
	// (DELETE /tasks/{id})
	DeleteTasksId(ctx context.Context, request DeleteTasksIdRequestObject) (DeleteTasksIdResponseObject, error)
	// Update a task by ID
	// (PATCH /tasks/{id})
	PatchTasksId(ctx context.Context, request PatchTasksIdRequestObject) (PatchTasksIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetTasks operation middleware
func (sh *strictHandler) GetTasks(ctx echo.Context) error {
	var request GetTasksRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTasks(ctx.Request().Context(), request.(GetTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTasksResponseObject); ok {
		return validResponse.VisitGetTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasks operation middleware
func (sh *strictHandler) PostTasks(ctx echo.Context) error {
	var request PostTasksRequestObject

	var body PostTasksJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasks(ctx.Request().Context(), request.(PostTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksResponseObject); ok {
		return validResponse.VisitPostTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTasksId operation middleware
func (sh *strictHandler) DeleteTasksId(ctx echo.Context, id int64) error {
	var request DeleteTasksIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTasksId(ctx.Request().Context(), request.(DeleteTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTasksIdResponseObject); ok {
		return validResponse.VisitDeleteTasksIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchTasksId operation middleware
func (sh *strictHandler) PatchTasksId(ctx echo.Context, id int64) error {
	var request PatchTasksIdRequestObject

	request.Id = id

	var body PatchTasksIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTasksId(ctx.Request().Context(), request.(PatchTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchTasksIdResponseObject); ok {
		return validResponse.VisitPatchTasksIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
