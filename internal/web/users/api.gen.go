// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package users

import (
	"fmt"
	"net/http"
	"newproject/internal/handlers"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}



type StrictHandler struct {
	userHandler   *handlers.UserHandler
	somethingElse interface{}
}

// DeleteTasksId implements ServerInterface.
func (s *StrictHandler) DeleteTasksId(ctx echo.Context, id int64) error {
	panic("unimplemented")
}

// DeleteUsersId implements ServerInterface.
func (s *StrictHandler) DeleteUsersId(ctx echo.Context, id int) error {
	panic("unimplemented")
}

// GetTasks implements ServerInterface.
func (s *StrictHandler) GetTasks(ctx echo.Context) error {
	panic("unimplemented")
}

// GetUsers implements ServerInterface.
func (s *StrictHandler) GetUsers(ctx echo.Context) error {
	panic("unimplemented")
}

// GetUsersIdTasks implements ServerInterface.
func (s *StrictHandler) GetUsersIdTasks(ctx echo.Context, id int64) error {
	panic("unimplemented")
}

// PatchTasksId implements ServerInterface.
func (s *StrictHandler) PatchTasksId(ctx echo.Context, id int64) error {
	panic("unimplemented")
}

// PatchUsersId implements ServerInterface.
func (s *StrictHandler) PatchUsersId(ctx echo.Context, id int) error {
	panic("unimplemented")
}

// PostTasks implements ServerInterface.
func (s *StrictHandler) PostTasks(ctx echo.Context) error {
	panic("unimplemented")
}

// PostUsers implements ServerInterface.
func (s *StrictHandler) PostUsers(ctx echo.Context) error {
	panic("unimplemented")
}

// NewStrictHandler - создает строгий хендлер для пользователей
func NewStrictHandler(userHandler *handlers.UserHandler, somethingElse interface{}) *StrictHandler {
	return &StrictHandler{
		userHandler:   userHandler,
		somethingElse: somethingElse,
	}
}

// NewTaskRequest defines model for NewTaskRequest.
type NewTaskRequest struct {
	IsDone *bool  `json:"is_done,omitempty"`
	Task   string `json:"task"`

	// UserId ID of the user who owns this task
	UserId int64 `json:"user_id"`
}

// Task defines model for Task.
type Task struct {
	Id     *int64  `json:"id,omitempty"`
	IsDone *bool   `json:"is_done,omitempty"`
	Task   *string `json:"task,omitempty"`

	// UserId ID of the user who owns this task
	UserId *int64 `json:"user_id,omitempty"`
}

// User defines model for User.
type User struct {
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	Email     *string    `json:"email,omitempty"`
	Id        *int64     `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Password  *string    `json:"password,omitempty"`
}

// PostTasksJSONRequestBody defines body for PostTasks for application/json ContentType.
type PostTasksJSONRequestBody = NewTaskRequest

// PatchTasksIdJSONRequestBody defines body for PatchTasksId for application/json ContentType.
type PatchTasksIdJSONRequestBody = Task

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = User

// PatchUsersIdJSONRequestBody defines body for PatchUsersId for application/json ContentType.
type PatchUsersIdJSONRequestBody = User

// GetUsersResponse defines the response model for GetUsers.
type GetUsersResponse struct {
	Users []User `json:"users"`
}

// GetUsersIdTasksResponse defines the response model for GetUsersIdTasks.
type GetUsersIdTasksResponse struct {
	Tasks []Task `json:"tasks"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all tasks
	// (GET /tasks)
	GetTasks(ctx echo.Context) error
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx echo.Context) error
	// Delete a task by ID
	// (DELETE /tasks/{id})
	DeleteTasksId(ctx echo.Context, id int64) error
	// Update a task by ID
	// (PATCH /tasks/{id})
	PatchTasksId(ctx echo.Context, id int64) error
	// Get all users
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// Create a new user
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// Delete user by ID
	// (DELETE /users/{id})
	DeleteUsersId(ctx echo.Context, id int) error
	// Update user by ID
	// (PATCH /users/{id})
	PatchUsersId(ctx echo.Context, id int) error
	// Get all tasks for a user
	// (GET /users/{id}/tasks)
	GetUsersIdTasks(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasks(ctx echo.Context) error {
	var err error
	err = w.Handler.GetTasks(ctx)
	return err
}

// PostTasks converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasks(ctx echo.Context) error {
	var err error
	err = w.Handler.PostTasks(ctx)
	return err
}

// DeleteTasksId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTasksId(ctx echo.Context) error {
	var err error
	var id int64
	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	err = w.Handler.DeleteTasksId(ctx, id)
	return err
}

// PatchTasksId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTasksId(ctx echo.Context) error {
	var err error
	var id int64
	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	err = w.Handler.PatchTasksId(ctx, id)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error
	err = w.Handler.GetUsers(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersId(ctx echo.Context) error {
	var err error
	var id int
	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	err = w.Handler.DeleteUsersId(ctx, id)
	return err
}

// PatchUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersId(ctx echo.Context) error {
	var err error
	var id int
	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	err = w.Handler.PatchUsersId(ctx, id)
	return err
}

// GetUsersIdTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersIdTasks(ctx echo.Context) error {
	var err error
	var id int64
	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	err = w.Handler.GetUsersIdTasks(ctx, id)
	return err
}

// EchoRouter interface for registering routes.
type EchoRouter interface {
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	// Register routes for tasks and users
	router.GET(baseURL+"/tasks", wrapper.GetTasks)
	router.POST(baseURL+"/tasks", wrapper.PostTasks)
	router.DELETE(baseURL+"/tasks/:id", wrapper.DeleteTasksId)
	router.PATCH(baseURL+"/tasks/:id", wrapper.PatchTasksId)

	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUsersId)
	router.PATCH(baseURL+"/users/:id", wrapper.PatchUsersId)
	router.GET(baseURL+"/users/:id/tasks", wrapper.GetUsersIdTasks)
}
